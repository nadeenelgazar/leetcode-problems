first solution using prefixSum:
class Solution {
    public int maxSubArray(int[] nums) {
       int[] prefixSum = new int[nums.length +1];
       prefixSum[0] = 0;
       for(int i = 1 ; i < prefixSum.length ; i++){
           prefixSum[i] = prefixSum[i - 1] + nums[i - 1];
       } 

       int minIndex = 0 ;
       int max = Integer.MIN_VALUE;

       for(int i = 1 ; i < prefixSum.length ;i++){
           if(prefixSum[i] - prefixSum[minIndex] > max)
            max = prefixSum[i] - prefixSum[minIndex];
           if(prefixSum[i] < prefixSum[minIndex])
             minIndex = i ;
       }
       return max;
    }
}

second solution using Kadane's algorithm:
class Solution {
    public int maxSubArray(int[] nums) {
        int maxEndingHere = 0;
        int maxSoFar = Integer.MIN_VALUE;

        for(int i = 0 ; i < nums.length ;i++){
            maxEndingHere+= nums[i];
            if(maxSoFar < maxEndingHere)
                maxSoFar = maxEndingHere;
            if(maxEndingHere < 0)
                maxEndingHere = 0;
        }

        return maxSoFar;
    }
}
