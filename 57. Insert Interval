first sol:
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        ArrayList<int[]> ans = new ArrayList<>();
        boolean flag = true;

        for(int[] interval : intervals){
            if(interval[1] < newInterval[0]){
                ans.add(interval);
            }else if(interval[0] > newInterval[1]){
                 if(flag){ ans.add(newInterval);}
                   ans.add(interval);
                   flag=false;
            }else{
                newInterval[0]=Math.min(interval[0],newInterval[0]);
                newInterval[1]=Math.max(interval[1],newInterval[1]);
            }
        }

        if(flag) ans.add(newInterval);

        int[][] arr = new int[ans.size()][2];
        arr = ans.toArray(arr);
        return arr;
    }
}


second sol:
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        ArrayList<int[]> intervalsList = new ArrayList<>();
        for(int[] interval : intervals){
            intervalsList.add(interval);
        }
        intervalsList.add(newInterval);

        Collections.sort(intervalsList,(a,b) -> a[0] - b[0]);

       LinkedList<int[]> ans = new LinkedList<>();
        for(int i = 0 ; i < intervalsList.size(); i++){
            if(ans.isEmpty() || ans.getLast()[1] < intervalsList.get(i)[0])
                ans.add(intervalsList.get(i));
            else{
                int[] lastOne = ans.getLast();
                lastOne[1] = Math.max(lastOne[1] ,intervalsList.get(i)[1]);
            }
        }
        int[][] ansIntervals = new int[ans.size()][2];
        for(int i = 0 ; i < ans.size(); i++){
           ansIntervals[i][0] = ans.get(i)[0];
            ansIntervals[i][1] = ans.get(i)[1];
        }
        return ansIntervals;
    }
}
