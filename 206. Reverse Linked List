first sol : reverse in the same linked list

class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null) return head;
        ListNode prev = null;

        while(head != null){
            ListNode temp = head.next;
            head.next = prev;
            prev = head;
            head = temp;
        }

        return prev;
       
    }
}

second sol : using a stack 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null) return head;
        
        Stack<Integer> stack = new Stack<>();
        ListNode newHead = new ListNode();
        ListNode ans = newHead;

        while(head != null){
            stack.push(head.val);
            head = head.next;
        }
        while(!stack.isEmpty()){
            newHead.val = stack.pop();
            if(!stack.isEmpty()){
                newHead.next = new ListNode();
                newHead = newHead.next;
            }
        }
        return ans;
    }
}
